<snippet>
	<content><![CDATA[
// Requires graph
template<class T, int level>
struct bfs_forest{
	static_assert(0 <= level && level <= 1);
#ifdef LOCAL
	#define ASSERT(x) assert(x)
#else
	#define ASSERT(x) 42
#endif
	int n;
	vector<int> pv;
	vector<int> pe;
	vector<int> order;
	vector<int> pos;
	vector<int> size;
	vector<int> depth;
	vector<int> root_of;
	vector<int> root;
	vector<T> dist;
	vector<int> was;
	void _init(int n){
		this->n = n;
		pv.resize(n, -1);
		pe.resize(n, -1);
		order.clear();
		pos.resize(n, -1);
		size.resize(n, -1);
		depth.resize(n, -1);
		if constexpr(level >= 1){
			root_of.resize(n, -1);
			root.clear();
			dist.resize(n);
		}
		was.resize(n, -2);
	}
	int attempt = -1;
	vector<int> q;
	// O(# of nodes reachable from src)
	template<class U, class F>
	void _build(const graph<U> &g, const vector<int> &src, F UT, T base_dist){
		q = src;
		for(auto u: src){
			ASSERT(was[u] != attempt);
			was[u] = attempt;
			pv[u] = -1;
			pe[u] = -1;
			depth[u] = 0;
			if constexpr(level >= 1){
				root_of[u] = u;
				root.push_back(u);
				dist[u] = base_dist;
			}
		}
		int init_size = (int)order.size();
		for(auto it = 0; it < (int)q.size(); ++ it){
			int u = q[it];
			pos[u] = (int)order.size();
			order.push_back(u);
			size[u] = 1;
			for(auto id: g.adj[u]){
				if(g.ignore && g.ignore(id)) continue;
				int v = g(u, id);
				if(was[v] == attempt) continue;
				was[v] = attempt;
				pv[v] = u;
				pe[v] = id;
				depth[v] = depth[u] + 1;
				if constexpr(level >= 1){
					root_of[v] = root_of[u];
					dist[v] = UT(g.edge[id].cost, dist[u]);
				}
				q.push_back(v);
			}
		}
		for(auto i = (int)order.size() - 1; i >= init_size; -- i){
			int u = order[i];
			if(~pv[u]) size[pv[u]] += size[u];
		}
		q.clear();
	}
	// O(# of nodes reachable from src)
	template<class U, class F = plus<>>
	void build(const graph<U> &g, const vector<int> &src, F UT = plus<>(), T base_dist = T{}){
		_init(g.n);
		for(auto u: src) ASSERT(0 <= u && u < n);
		++ attempt;
		_build(g, src, UT, base_dist);
	}
	// O(n + m)
	template<class U, class F = plus<>>
	void build_all(const graph<U> &g, F UT = plus<>(), T base_dist = T{}){
		_init(g.n);
		++ attempt;
		for(auto u = 0; u < n; ++ u) if(was[u] != attempt) _build(g, {u}, UT, base_dist);
	}
	// Check if u is visited during the last build-like call.
	bool visited(int u) const{
		ASSERT(0 <= u && u < n);
		return was[u] == attempt;
	}
	vector<int> get_path(int u, int v) const{
		ASSERT(visited(u) && visited(v));
		vector<int> left, right;
		while(u != v && ~pv[u] && ~pv[v]){
			if(depth[u] >= depth[v]){
				left.push_back(u);
				u = pv[u];
			}
			else{
				right.push_back(v);
				v = pv[v];
			}
		}
		ASSERT(u == v);
		left.push_back(u);
		left.insert(left.end(), right.rbegin(), right.rend());
		return left;
	}
#undef ASSERT
};

// pv, pe, order, pos, end, size, depth
template<class T>
auto make_basic_bfs_forest(){
	return bfs_forest<T, 0>();
}
// (basic_set), root_of, root, dist
template<class T>
auto make_augmented_bfs_forest(){
	return bfs_forest<T, 1>();
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>bfs_forest</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
