<snippet>
	<content><![CDATA[
template<bool HAS_PATH_QUERY, bool HAS_PATH_UPDATE, bool HAS_SUBTREE_QUERY, bool HAS_SUBTREE_UPDATE, bool IS_COMMUTATIVE, class T, class U, class F1, class F2, class F3, class F4, class F5, class F6>
struct link_cut_trees_base{
#ifdef LOCAL
	#define ASSERT(x) assert(x)
#else
	#define ASSERT(x) 42
#endif
#define ifPQ if constexpr(HAS_PATH_QUERY)
#define ifPU if constexpr(HAS_PATH_UPDATE)
#define ifSQ if constexpr(HAS_SUBTREE_QUERY)
#define ifSU if constexpr(HAS_SUBTREE_UPDATE)
#define ifNC if constexpr(!IS_COMMUTATIVE)
#define ifPUSU if constexpr(HAS_PATH_UPDATE || HAS_SUBTREE_UPDATE)
	// If there is path update and subtree query, it needs path aggregation to do lazy propagation
	static_assert(HAS_PATH_QUERY || !HAS_PATH_UPDATE || !HAS_SUBTREE_QUERY);
	// If there is subtree query, T has to be commutative and invertible
	static_assert(!HAS_SUBTREE_QUERY || IS_COMMUTATIVE);
	struct base_node_info{
		base_node_info(){ }
		base_node_info(const T &x): data(x){ }
		int size = 1, pv = -1, lazy_flip = false;
		T data;
		array<int, 2> child = {-1, -1};
	};
	vector<base_node_info> base;
	// aggregation of data in the subtree in the auxiliary splay tree, aggregates in fixed order
	vector<T> aux_data;
	// 0: aggregation of data in the subtree in the auxiliary splay tree along with their virtual data
	// 1: aggregation of subtr data of virtual childs
	vector<array<T, 2>> subtr_data;
	vector<U> aux_lazy; // update splay subtree
	// 0: update auxiliary splay subtree along with their virtual childs
	// 1: update virtual childs
	vector<array<U, 2>> subtr_lazy;
	F1 TT; // monoid operation (always adjacent)
	T T_id; // monoid identity
	F2 Tinv; // group inverse
	F3 Tflip; // flip the operation order
	F4 UU; // monoid operation (superset, subset)
	U U_id; // monoid identity
	F5 Uinv; // group inverse
	F6 UT; // action of U on T (superset, subset)
	link_cut_trees_base(F1 TT, T T_id, F2 Tinv, F3 Tflip, F4 UU, U U_id, F5 Uinv, F6 UT): TT(TT), T_id(T_id), Tinv(Tinv), Tflip(Tflip), UU(UU), U_id(U_id), Uinv(Uinv), UT(UT){ }
	template<class ostream>
	friend ostream &operator<<(ostream &out, link_cut_trees_base lct){
		int n = (int)lct.data.size();
		vector<int> roots;
		vector<vector<int>> adj(n);
		vector<array<int, 2>> edge;
		for(auto u = 0; u < n; ++ u){
			if(auto p = lct.parent_or_is_root(u); ~p) adj[p].push_back(u), edge.push_back({p, u});
			else roots.push_back(u);
		}
		out << "\n=========== LCT Info Begin ===========\n";
		out << "[# of nodes]: " << n << "\n";
		out << "[Edges]: {";
		for(auto i = 0; i < (int)edge.size(); ++ i){
			out << "{" << edge[i][0] << ", " << edge[i][1] << "}";
			if(i + 1 < (int)edge.size()) out << ", ";
		}
		out << "}\n";
		for(auto r: roots){
			out << "[Component rooted at " << r << "]:\n";
			auto dfs = [&](auto self, int u)->void{
				out << u << ": data{" << lct.base[u].data << "}, pv{" << lct.parent_or_is_root(u) << "}, child{";
				for(auto i = 0; i < (int)adj[u].size(); ++ i){
					out << adj[u][i];
					if(i + 1 < (int)adj[u].size()) out << ", ";
				}
				out << "}\n";
				for(auto v: adj[u]) self(self, v);
			};
			dfs(dfs, r);
		}
		return out << "============ LCT Info End ============";
	}
	void _apply_aux(int u, const U &f){
		static_assert(HAS_PATH_UPDATE);
		ASSERT(0 <= u && u < (int)base.size());
		base[u].data = UT(f, base[u].data);
		aux_lazy[u] = UU(f, aux_lazy[u]);
		ifPQ{
			T x = UT(f, aux_data[u]);
			ifSQ subtr_data[u][0] = TT(x, TT(subtr_data[u][0], Tinv(aux_data[u])));
			aux_data[u] = x;
		}
	}
	void _apply_subtr(int u, const U &f){
		static_assert(HAS_SUBTREE_UPDATE);
		ASSERT(0 <= u && u < (int)base.size());
		base[u].data = UT(f, base[u].data);
		ifPQ aux_data[u] = UT(f, aux_data[u]);
		ifSQ{
			subtr_data[u][0] = UT(f, subtr_data[u][0]);
			subtr_data[u][1] = UT(f, subtr_data[u][1]);
		}
		subtr_lazy[u][0] = UU(f, subtr_lazy[u][0]);
		subtr_lazy[u][1] = UU(f, subtr_lazy[u][1]);
	}
	void _apply_flip(int u){
		ASSERT(0 <= u && u < (int)base.size());
		base[u].lazy_flip ^= 1;
		ifNC aux_data[u] = Tflip(aux_data[u]);
		swap(base[u].child[0], base[u].child[1]);
	}
	template<bool sign>
	void _apply_virtual(int u, int v){
		static_assert(HAS_SUBTREE_QUERY || HAS_SUBTREE_UPDATE);
		ASSERT(0 <= min(u, v) && max(u, v) < (int)base.size());
		if constexpr(sign == 0){
			ifSQ subtr_data[u][1] = TT(subtr_data[u][1], subtr_data[v][0]);
			ifSU _apply_subtr(v, Uinv(subtr_lazy[u][1]));
		}
		else{
			ifSU _apply_subtr(v, subtr_lazy[u][1]);
			ifSQ subtr_data[u][1] = TT(subtr_data[u][1], Tinv(subtr_data[v][0]));
		}
	}
	void _push(int u){
		ASSERT(0 <= u && u < (int)base.size());
		ifPU if(aux_lazy[u] != U_id){
			if(~base[u].child[0]) _apply_aux(base[u].child[0], aux_lazy[u]);
			if(~base[u].child[1]) _apply_aux(base[u].child[1], aux_lazy[u]);
			aux_lazy[u] = U_id;
		}
		ifSU{
			if(subtr_lazy[u][0] != U_id){
				if(~base[u].child[0]) _apply_subtr(base[u].child[0], subtr_lazy[u][0]);
				if(~base[u].child[1]) _apply_subtr(base[u].child[1], subtr_lazy[u][0]);
				subtr_lazy[u][0] = U_id;
			}
		}
		if(base[u].lazy_flip){
			if(~base[u].child[0]) _apply_flip(base[u].child[0]);
			if(~base[u].child[1]) _apply_flip(base[u].child[1]);
			base[u].lazy_flip = false;
		}
	}
	void _refresh(int u){
		ASSERT(0 <= u && u < (int)base.size());
		ifPU ASSERT(aux_lazy[u] == U_id);
		ifSU ASSERT(subtr_lazy[u][0] == U_id);
		base[u].size = 1 + _internal_size(base[u].child[0]) + _internal_size(base[u].child[1]);
		ifPQ aux_data[u] = base[u].data;
		ifSQ subtr_data[u][0] = TT(base[u].data, subtr_data[u][1]);
		if(auto v = base[u].child[0]; ~v){
			ifPQ aux_data[u] = TT(aux_data[v], aux_data[u]);
			ifSQ subtr_data[u][0] = TT(subtr_data[u][0], subtr_data[v][0]);
		}
		if(auto w = base[u].child[1]; ~w){
			ifPQ aux_data[u] = TT(aux_data[u], aux_data[w]);
			ifSQ subtr_data[u][0] = TT(subtr_data[u][0], subtr_data[w][0]);
		}
	}
	int _dir(int u){
		ASSERT(0 <= u && u < (int)base.size());
		if(!~base[u].pv) return -2; // root of its splay tree which contains LCT component root
		if(base[base[u].pv].child[0] == u) return 0; // left child
		if(base[base[u].pv].child[1] == u) return 1; // right child
		return -1; // root of its splay tree which does not contain LCT component root
	}
	bool _is_auxiliary_root(int u){
		ASSERT(0 <= u && u < (int)base.size());
		return _dir(u) < 0;
	}
	void _set_link(int u, int v, int d){
		ASSERT(-1 <= min(u, v) && max(u, v) < (int)base.size());
		if(~v) base[v].pv = u;
		if(d >= 0) (d == 0 ? base[u].child[0] : base[u].child[1]) = v;
	}
	// Assumes p and p->p propagated
	void _rotate(int u){
		ASSERT(0 <= u && u < (int)base.size() && !_is_auxiliary_root(u));
		int x = _dir(u), g = base[u].pv;
		_set_link(base[g].pv, u, _dir(g));
		_set_link(g, x == 1 ? base[u].child[0] : base[u].child[1], x);
		_set_link(u, g, x ^ 1);
		_refresh(g);
	}
	// Bring the node to the top
	void _splay(int u){
		ASSERT(0 <= u && u < (int)base.size());
		for(; !_is_auxiliary_root(u) && !_is_auxiliary_root(base[u].pv); _rotate(u)){
			_push(base[base[u].pv].pv), _push(base[u].pv), _push(u);
			_dir(u) == _dir(base[u].pv) ? _rotate(base[u].pv) : _rotate(u);
		}
		if(!_is_auxiliary_root(u)) _push(base[u].pv), _push(u), _rotate(u);
		_push(u), _refresh(u);
	}
	int _internal_size(int u){
		ASSERT(-1 <= u && u < (int)base.size());
		return ~u ? base[u].size : 0;
	}
	// Put u on the preferred path then splay it (right subtree is empty)
	void _access(int u){
		ASSERT(0 <= u && u < (int)base.size());
		for(auto v = u, p = -1; ~v; v = base[p = v].pv){
			_splay(v);
			if constexpr(HAS_SUBTREE_QUERY || HAS_SUBTREE_UPDATE){
				if(~p) _apply_virtual<1>(v, p);
				if(~base[v].child[1]) _apply_virtual<0>(v, base[v].child[1]);
			}
			base[v].child[1] = p;
			_refresh(v);
		}
		_splay(u);
		ASSERT(!~base[u].child[1]);
	}
	void build(int n){
		ASSERT(0 <= n);
		build(vector<T>(n, T_id));
	}
	void build(int n, T init){
		ASSERT(0 <= n);
		build(vector<T>(n, init));
	}
	template<class V>
	void build(const vector<V> &a){
		int n = (int)a.size();
		base.assign(n, base_node_info{});
		for(auto u = 0; u < n; ++ u) base[u].data = a[u];
		ifPQ aux_data = vector<T>(a.begin(), a.end());
		ifSQ{
			subtr_data.assign(n, array<T, 2>{T_id, T_id});
			for(auto u = 0; u < n; ++ u) subtr_data[u][0] = base[u].data;
		}
		ifPU aux_lazy.assign(n, U_id);
		ifSU subtr_lazy.assign(n, array<U, 2>{U_id, U_id});
	}
	int new_node(const T &x){
		base.push_back(base_node_info{x});
		ifPQ aux_data.push_back(x);
		ifSQ subtr_data.push_back({x, T_id});
		ifPU aux_lazy.push_back(U_id);
		ifSU subtr_lazy.push_back({U_id, U_id});
		return (int)base.size() - 1;
	}
	// Make u the root of its connected component
	void reroot(int u){
		ASSERT(0 <= u && u < (int)base.size());
		_access(u), _apply_flip(u), _access(u);
		ASSERT(!~base[u].child[0] && !~base[u].child[1]);
	}
	int root_of(int u){
		ASSERT(0 <= u && u < (int)base.size());
		for(_access(u); ~base[u].child[0]; _push(u)) u = base[u].child[0];
		return _access(u), u;
	}
	// If u is a non-root vertex in its component, return its parent
	// Otherwise, return -1
	int parent_or_is_root(int u){
		ASSERT(0 <= u && u < (int)base.size());
		_access(u);
		if(!~base[u].child[0]) return -1;
		for(_push(u = base[u].child[0]); ~base[u].child[1]; _push(u)) u = base[u].child[1];
		return _access(u), u;
	}
	// If u and v are in the same component, find the lca
	// Otherwise, return -1
	int lca_or_disconnected(int u, int v){
		ASSERT(0 <= min(u, v) && max(u, v) < (int)base.size());
		if(u == v) return u;
		_access(u), _access(v);
		if(!~base[u].pv) return -1;
		_splay(u);
		return ~base[u].pv ? base[u].pv : u;
	}
	bool adjacent(int u, int v){
		ASSERT(0 <= min(u, v) && max(u, v) < (int)base.size());
		if(u == v) return false;
		int w = lca_or_disconnected(u, v);
		if(!~w || u != w && v != w) return false;
		return u != w ? w == parent_or_is_root(u) : w == parent_or_is_root(v);
	}
	int depth(int u){
		ASSERT(0 <= u && u < (int)base.size());
		_access(u);
		return _internal_size(base[u].child[0]);
	}
	template<bool RESTORE_ROOT = true>
	int distance(int u, int v){
		ASSERT(0 <= min(u, v) && max(u, v) < (int)base.size() && connected(u, v));
		int init_root = -1;
		if constexpr(RESTORE_ROOT) init_root = root_of(u);
		if(u != init_root) reroot(u);
		_access(v);
		int res = _internal_size(base[v].child[0]);
		if constexpr(RESTORE_ROOT) if(u != init_root) reroot(init_root);
		return res;
	}
	bool connected(int u, int v){
		ASSERT(0 <= min(u, v) && max(u, v) < (int)base.size());
		if(u == v) return true;
		_access(u), _access(v);
		return ~base[u].pv;
	}
	// Returns the k-th ancestor on the path to root
	int find_ancestor_by_order(int u, int k){
		ASSERT(0 <= u && u < (int)base.size() && 0 <= k);
		k = depth(u) - k;
		ASSERT(k >= 0);
		for(; ; _push(u)){
			int size = _internal_size(base[u].child[0]);
			if(size == k) return _access(u), u;
			if(size < k) k -= size + 1, u = base[u].child[1];
			else u = base[u].child[0];
		}
		ASSERT(false);
	}
	// Returns the k-th vertex on the u-v path
	template<bool RESTORE_ROOT = true>
	int find_vertex_by_order(int u, int v, int k){
		ASSERT(0 <= min(u, v) && max(u, v) < (int)base.size() && connected(u, v) && 0 <= k);
		int init_root = -1;
		if constexpr(RESTORE_ROOT) init_root = root_of(v);
		if(v != init_root) reroot(v);
		int res = find_ancestor_by_order(u, k);
		if constexpr(RESTORE_ROOT) if(v != init_root) reroot(init_root);
		return res;
	}
	// Make u the parent of v
	void link(int u, int v){
		ASSERT(0 <= min(u, v) && max(u, v) < (int)base.size() && !connected(u, v));
		reroot(v), _access(u), _set_link(v, u, 0), _refresh(v);
	}
	bool cut_from_parent(int u){
		ASSERT(0 <= u && u < (int)base.size());
		_access(u);
		if(!~base[u].child[0]) return false; // no parent
		base[u].child[0] = base[base[u].child[0]].pv = -1;
		_refresh(u);
		return true;
	}
	// Assumes u and v are adjacent in tree
	void cut(int u, int v){
		ASSERT(adjacent(u, v));
		cut_from_parent(depth(u) > depth(v) ? u : v);
	}
	T query(int u){
		ASSERT(0 <= u && u < (int)base.size());
		ifPUSU _access(u);
		return base[u].data;
	}
	template<bool RESTORE_ROOT = true>
	T query_path(int u, int v){
		static_assert(HAS_PATH_QUERY);
		ASSERT(0 <= min(u, v) && max(u, v) < (int)base.size() && connected(u, v));
		int init_root = -1;
		if constexpr(RESTORE_ROOT) init_root = root_of(u);
		if(init_root != u) reroot(u);
		_access(v);
		T res = aux_data[v];
		if constexpr(RESTORE_ROOT) if(init_root != u) reroot(init_root);
		return res;
	}
	T query_subtree(int u){
		static_assert(HAS_SUBTREE_QUERY);
		ASSERT(0 <= u && u < (int)base.size());
		int v = parent_or_is_root(u);
		if(~v) cut_from_parent(u);
		T res = subtr_data[u][0];
		if(~v) link(v, u);
		return res;
	}
	void set(int u, const T &x){
		ASSERT(0 <= u && u < (int)base.size());
		_access(u);
		base[u].data = x;
		_refresh(u);
	}
	void update(int u, const U &f){
		static_assert(HAS_PATH_UPDATE || HAS_SUBTREE_UPDATE);
		ASSERT(0 <= u && u < (int)base.size());
		_access(u);
		base[u].data = UT(f, base[u].data);
		_refresh(u);
	}
	template<bool RESTORE_ROOT = true>
	void update_path(int u, int v, const U &f){
		static_assert(HAS_PATH_UPDATE);
		ASSERT(0 <= min(u, v) && max(u, v) < (int)base.size() && connected(u, v));
		int init_root = -1;
		if constexpr(RESTORE_ROOT) init_root = root_of(u);
		if(u != init_root) reroot(u);
		_access(v), _apply_aux(v, f);
		if constexpr(RESTORE_ROOT) if(u != init_root) reroot(init_root);
	}
	void update_subtree(int u, const U &f){
		static_assert(HAS_SUBTREE_UPDATE);
		ASSERT(0 <= u && u < (int)base.size());
		int v = parent_or_is_root(u);
		if(~v) cut_from_parent(u);
		_apply_subtr(u, f);
		if(~v) link(v, u);
	}
	// Let the data on the u-v path be represented by an array A
	// A must be sorted by pred
	// Returns the r where everything in A[0, r) evaluates to true, and A[r, len(A)) evalutes to false
	template<bool RESTORE_ROOT = true>
	int partition_point(int u, int v, auto pred){
		ASSERT(0 <= min(u, v) && max(u, v) < (int)base.size() && connected(u, v));
		int init_root = -1;
		if constexpr(RESTORE_ROOT) init_root = root_of(u);
		if(u != init_root) reroot(u);
		_access(v);
		int res = 0;
		while(true){
			_push(v);
			if(pred(base[v].data)){
				res += _internal_size(base[v].child[0]) + 1;
				if(!~base[v].child[1]){
					_splay(v);
					break;
				}
				v = base[v].child[1];
			}
			else{
				if(!~base[v].child[0]){
					_splay(v);
					break;
				}
				v = base[v].child[0];
			}
		}
		if constexpr(RESTORE_ROOT) if(u != init_root) reroot(init_root);
		return res;
	}
	// Let the data on the u-v path be represented by an array A
	// Assumes pred(A[0, r)) is T, ..., T, F, ..., F for 0 <= r <= len(A)
	// Returns max r with T
	template<bool RESTORE_ROOT = true>
	int max_pref(int u, int v, auto pred){
		static_assert(HAS_PATH_QUERY);
		ASSERT(0 <= min(u, v) && max(u, v) < (int)base.size() && connected(u, v) && pred(T_id));
		int init_root = -1;
		if constexpr(RESTORE_ROOT) init_root = root_of(u);
		if(u != init_root) reroot(u);
		int n = depth(v) + 1;
		if(pred(aux_data[v])){
			if constexpr(RESTORE_ROOT) reroot(init_root);
			return n;
		}
		T sum = T_id;
		auto recurse = [&](auto self, int u, int l)->int{
			if(!~u) return n;
			if(auto x = TT(sum, aux_data[u]); pred(x)){
				sum = x;
				return n;
			}
			_push(u);
			if(auto p = self(self, base[u].child[0], l); p < n) return p;
			l += _internal_size(base[u].child[0]);
			if(!pred(sum = TT(sum, base[u].data))){
				_splay(u);
				return l;
			}
			return self(self, base[u].child[1], l + 1);
		};
		int res = recurse(recurse, v, 0);
		if constexpr(RESTORE_ROOT) if(u != init_root) reroot(init_root);
		return res;
	}
#undef ASSERT
#undef ifPQ
#undef ifPU
#undef ifSQ
#undef ifSU
#undef ifNC
#undef ifPUSU
};

template<class T>
auto make_LCT(){
	using U = int;
	auto TT = [&](){ assert(false); };
	using F1 = decltype(TT);
	T T_id = {};
	auto Tinv = [&](){ assert(false); };
	using F2 = decltype(Tinv);
	auto Tflip = [&](){ assert(false); };
	using F3 = decltype(Tflip);
	auto UU = [&](){ assert(false); };
	using F4 = decltype(UU);
	U U_id = {};
	auto Uinv = [&](){ assert(false); };
	using F5 = decltype(Uinv);
	auto UT = [&](){ assert(false); };
	using F6 = decltype(UT);
	return link_cut_trees_base<false, false, false, false, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports
// - path query
// IS_COMMUTATIVE = true results in slightly better constant factor, Tflip is totally ignored in such case
template<bool IS_COMMUTATIVE, class T, class F1, class F3>
auto make_PQ_LCT(F1 TT, T T_id, F3 Tflip){
	using U = int;
	auto Tinv = [&](){ assert(false); };
	using F2 = decltype(Tinv);
	auto UU = [&](){ assert(false); };
	using F4 = decltype(UU);
	U U_id = {};
	auto Uinv = [&](){ assert(false); };
	using F5 = decltype(Uinv);
	auto UT = [&](){ assert(false); };
	using F6 = decltype(UT);
	return link_cut_trees_base<true, false, false, false, IS_COMMUTATIVE, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports
// - path update
template<class T, class U, class F4, class F6>
auto make_PU_LCT(F4 UU, U U_id, F6 UT){
	auto TT = [&](){ assert(false); };
	using F1 = decltype(TT);
	T T_id = {};
	auto Tinv = [&](){ assert(false); };
	using F2 = decltype(Tinv);
	auto Tflip = [&](){ assert(false); };
	using F3 = decltype(Tflip);
	auto Uinv = [&](){ assert(false); };
	using F5 = decltype(Uinv);
	return link_cut_trees_base<false, true, false, false, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports
// - subtree query (commutative & invertible)
template<class T, class F1, class F2>
auto make_SQ_LCT(F1 TT, T T_id, F2 Tinv){
	using U = int;
	auto Tflip = [&](){ assert(false); };
	using F3 = decltype(Tflip);
	auto UU = [&](){ assert(false); };
	using F4 = decltype(UU);
	U U_id = {};
	auto Uinv = [&](){ assert(false); };
	using F5 = decltype(Uinv);
	auto UT = [&](){ assert(false); };
	using F6 = decltype(UT);
	return link_cut_trees_base<false, false, true, false, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports:
// - subtree update (commutative & invertible)
template<class T, class U, class F4, class F5, class F6>
auto make_SU_LCT(F4 UU, U U_id, F5 Uinv, F6 UT){
	auto TT = [&](){ assert(false); };
	using F1 = decltype(TT);
	T T_id = {};
	auto Tinv = [&](){ assert(false); };
	using F2 = decltype(Tinv);
	auto Tflip = [&](){ assert(false); };
	using F3 = decltype(Tflip);
	return link_cut_trees_base<false, false, false, true, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports
// - path query
// - path update
// IS_COMMUTATIVE = true results in slightly better constant factor, Tflip is totally ignored in such case
template<bool IS_COMMUTATIVE, class T, class U, class F1, class F3, class F4, class F6>
auto make_PQPU_LCT(F1 TT, T T_id, F3 Tflip, F4 UU, U U_id, F6 UT){
	auto Tinv = [&](){ assert(false); };
	using F2 = decltype(Tinv);
	auto Uinv = [&](){ assert(false); };
	using F5 = decltype(Uinv);
	return link_cut_trees_base<true, true, false, false, IS_COMMUTATIVE, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports
// - path + subtree query (commutative & invertible)
template<class T, class F1, class F2>
auto make_PQSQ_LCT(F1 TT, T T_id, F2 Tinv){
	using U = int;
	auto Tflip = [&](){ assert(false); };
	using F3 = decltype(Tflip);
	auto UU = [&](){ assert(false); };
	using F4 = decltype(UU);
	U U_id = {};
	auto Uinv = [&](){ assert(false); };
	using F5 = decltype(Uinv);
	auto UT = [&](){ assert(false); };
	using F6 = decltype(UT);
	return link_cut_trees_base<true, false, true, false, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports
// - path query
// - subtree update (commutative & invertible)
// IS_COMMUTATIVE = true results in slightly better constant factor, Tflip is totally ignored in such case
template<bool IS_COMMUTATIVE, class T, class U, class F1, class F3, class F4, class F5, class F6>
auto make_PQSU_LCT(F1 TT, T T_id, F3 Tflip, F4 UU, U U_id, F5 Uinv, F6 UT){
	auto Tinv = [&](){ assert(false); };
	using F2 = decltype(Tinv);
	return link_cut_trees_base<true, false, false, true, IS_COMMUTATIVE, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports
// - path + subtree update (commutative & invertible)
template<class T, class U, class F4, class F5, class F6>
auto make_PUSU_LCT(F4 UU, U U_id, F5 Uinv, F6 UT){
	auto TT = [&](){ assert(false); };
	using F1 = decltype(TT);
	T T_id = {};
	auto Tinv = [&](){ assert(false); };
	using F2 = decltype(Tinv);
	auto Tflip = [&](){ assert(false); };
	using F3 = decltype(Tflip);
	return link_cut_trees_base<false, true, false, true, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports
// - subtree query (commutative & invertible)
// - subtree update (commutative & invertible)
template<class T, class U, class F1, class F2, class F4, class F5, class F6>
auto make_SQSU_LCT(F1 TT, T T_id, F2 Tinv, F4 UU, U U_id, F5 Uinv, F6 UT){
	auto Tflip = [&](){ assert(false); };
	using F3 = decltype(Tflip);
	return link_cut_trees_base<false, false, true, true, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports
// - path + subtree query (commutative & invertible)
// - path update
template<class T, class U, class F1, class F2, class F4, class F6>
auto make_PQPUSQ_LCT(F1 TT, T T_id, F2 Tinv, F4 UU, U U_id, F6 UT){
	auto Tflip = [&](){ assert(false); };
	using F3 = decltype(Tflip);
	auto Uinv = [&](){ assert(false); };
	using F5 = decltype(Uinv);
	return link_cut_trees_base<true, true, true, false, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports
// - path query
// - path + subtree update (commutative & invertible)
// IS_COMMUTATIVE = true results in slightly better constant factor, Tflip is totally ignored in such case
template<bool IS_COMMUTATIVE, class T, class U, class F1, class F3, class F4, class F5, class F6>
auto make_PQPUSU_LCT(F1 TT, T T_id, F3 Tflip, F4 UU, U U_id, F5 Uinv, F6 UT){
	auto Tinv = [&](){ assert(false); };
	using F2 = decltype(Tinv);
	return link_cut_trees_base<true, true, false, true, IS_COMMUTATIVE, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports
// - path + subtree query (commutative & invertible)
// - subtree update (commutative & invertible)
template<class T, class U, class F1, class F2, class F4, class F5, class F6>
auto make_PQSQSU_LCT(F1 TT, T T_id, F2 Tinv, F4 UU, U U_id, F5 Uinv, F6 UT){
	auto Tflip = [&](){ assert(false); };
	using F3 = decltype(Tflip);
	return link_cut_trees_base<true, false, true, true, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
// Supports
// - path + subtree query (commutative & invertible)
// - path + subtree update (commutative & invertible)
template<class T, class U, class F1, class F2, class F4, class F5, class F6>
auto make_PQPUSQSU_LCT(F1 TT, T T_id, F2 Tinv, F4 UU, U U_id, F5 Uinv, F6 UT){
	auto Tflip = [&](){ assert(false); };
	using F3 = decltype(Tflip);
	return link_cut_trees_base<true, true, true, true, true, T, U, F1, F2, F3, F4, F5, F6>(TT, T_id, Tinv, Tflip, UU, U_id, Uinv, UT);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>link_cut_trees</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
