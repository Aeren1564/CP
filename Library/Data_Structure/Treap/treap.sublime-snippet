<snippet>
	<content><![CDATA[
template<bool PASS_OFFSET, bool HAS_QUERY, bool HAS_UPDATE, bool HAS_FLIP, bool IS_COMMUTATIVE, class T, class U, class F1, class F2, class F3, class F4>
struct treap_base{
#ifdef LOCAL
	#define ASSERT(x) assert(x)
#else
	#define ASSERT(x) 42
#endif
#define ifP if constexpr(PASS_OFFSET)
#define ifQ if constexpr(HAS_QUERY)
#define ifU if constexpr(HAS_UPDATE)
#define ifF if constexpr(HAS_FLIP)
#define ifNC if constexpr(!IS_COMMUTATIVE)
	struct base_node_info{
		base_node_info(unsigned int priority, T data, array<int, 2> child): priority(priority), data(data), child(child){ }
		unsigned int priority;
		int pv = -1, internal_size = 1;
		array<int, 2> child;
		T data;
	};
	vector<base_node_info> base;
	vector<int> lazy_flip;
	vector<T> subtr_data;
	vector<U> lazy;
	F1 TT; // monoid operation (always adjacent)
	T T_id; // monoid identity
	F2 UU; // monoid operation (superset, subset), or (superset, subset, offset) if PASS_OFFSET
	U U_id; // monoid identity
	F3 UT; // action of U on T (superset, subset), or (superset, subset, offset) if PASS_OFFSET
	F4 Tflip;
	treap_base(F1 TT, T T_id, F2 UU, U U_id, F3 UT, F4 Tflip): TT(TT), T_id(T_id), UU(UU), U_id(U_id), UT(UT), Tflip(Tflip){ }
	void reserve(int n){
		ASSERT(n >= 0);
		base.reserve(n);
		ifF lazy_flip.reserve(n);
		ifQ subtr_data.reserve(n);
		ifU lazy.reserve(n);
	}
	void _push(int u){
		ifU if(lazy[u] != U_id){
			if(auto v = base[u].child[0]; ~v){
				ifP{
					base[v].data = UT(lazy[u], base[v].data, size(base[v].child[0]));
					lazy[v]  = UU(lazy[u], lazy[v], 0);
					ifQ subtr_data[v] = UT(lazy[u], subtr_data[v], 0);
				}
				else{
					base[v].data = UT(lazy[u], base[v].data);
					lazy[v]  = UU(lazy[u], lazy[v]);
					ifQ subtr_data[v] = UT(lazy[u], subtr_data[v]);
				}
			}
			if(auto w = base[u].child[1]; ~w){
				ifP{
					int offset = size(base[u].child[0]) + 1;
					base[w].data = UT(lazy[u], base[w].data, offset + size(base[w].child[0]));
					lazy[w]  = UU(lazy[u], lazy[w], offset);
					ifQ subtr_data[w] = UT(lazy[u], subtr_data[w], offset);
				}
				else{
					base[w].data = UT(lazy[u], base[w].data);
					lazy[w]  = UU(lazy[u], lazy[w]);
					ifQ subtr_data[w] = UT(lazy[u], subtr_data[w]);
				}
			}
			lazy[u] = U_id;
		}
		ifF if(lazy_flip[u]){
			if(auto v = base[u].child[0]; ~v){
				swap(base[v].child[0], base[v].child[1]);
				lazy_flip[v] ^= 1;
				ifQ ifNC subtr_data[v] = Tflip(subtr_data[v]);
			}
			if(auto w = base[u].child[1]; ~w){
				swap(base[w].child[0], base[w].child[1]);
				lazy_flip[w] ^= 1;
				ifQ ifNC subtr_data[w] = Tflip(subtr_data[w]);
			}
			lazy_flip[u] = false;
		}
	}
	template<bool UPDATE_STRUCTURE = true>
	void refresh(int u){
		if constexpr(UPDATE_STRUCTURE) base[u].internal_size = 1;
		ifQ subtr_data[u] = T_id;
		if(auto v = base[u].child[0]; ~v){
			if constexpr(UPDATE_STRUCTURE){
				base[v].pv = u;
				base[u].internal_size += base[v].internal_size;
			}
			ifQ{
				auto x = subtr_data[v];
				ifU if(lazy[u] != U_id){
					ifP x = UT(lazy[u], x, 0);
					else x = UT(lazy[u], x);
				}
				ifF ifNC if(lazy_flip[u]) x = Tflip(x);
				subtr_data[u] = x;
			}
		}
		ifQ subtr_data[u] = TT(subtr_data[u], base[u].data);
		if(auto w = base[u].child[1]; ~w){
			if constexpr(UPDATE_STRUCTURE){
				base[w].pv = u;
				base[u].internal_size += base[w].internal_size;
			}
			ifQ{
				auto x = subtr_data[w];
				ifU if(lazy[u] != U_id){
					ifP x = UT(lazy[u], x, size(base[u].child[0]) + 1);
					else x = UT(lazy[u], x);
				}
				ifF ifNC if(lazy_flip[u]) x = Tflip(x);
				subtr_data[u] = TT(subtr_data[u], x);
			}
		}
	}
	void heapify(int u){
		if(~u){
			int v = u;
			if(~base[u].child[0] && base[base[u].child[0]].priority > base[v].priority) v = base[u].child[0];
			if(~base[u].child[1] && base[base[u].child[1]].priority > base[v].priority) v = base[u].child[1];
			if(u != v) swap(base[u].priority, base[v].priority), heapify(v);
		}
	}
	vector<int> dead_node;
	int new_node(const T &x, int v = -1, int w = -1){
		// Among all seeds in range [0, 1769666],
		// 72718 has the longest sequence of unique numbers, which is of length 362129.
		static mt19937 rng(72718);
		int u;
		if(dead_node.empty()){
			u = (int)base.size();
			base.push_back(base_node_info{(unsigned int)rng(), x, {v, w}});
			if(~v) base[v].pv = u;
			if(~w) base[w].pv = u;
			ifQ subtr_data.push_back(x);
			ifU lazy.push_back(U_id);
			ifF lazy_flip.push_back(0);
		}
		else{
			u = dead_node.back();
			dead_node.pop_back();
			base[u] = base_node_info{(unsigned int)rng(), x, {v, w}};
			if(~v) base[v].pv = u;
			if(~w) base[w].pv = u;
			ifQ subtr_data[u] = x;
			ifU lazy[u] = U_id;
			ifF lazy_flip[u] = 0;
		}
		heapify(u);
		refresh(u);
		return u;
	}
	// O(1)
	int size(int root) const{
		return ~root ? base[root].internal_size : 0;
	}
	// Split to [-inf, x), [x, inf)
	// Data must be sorted <
	// O(log(n))
	pair<int, int> split_by_key(int root, const T &x){
		if(!~root) return {-1, -1};
		_push(root);
		if(base[root].data < x){
			auto [a, b] = split_by_key(base[root].child[1], x);
			base[root].child[1] = a, refresh(root);
			return {root, b};
		}
		else{
			auto [a, b] = split_by_key(base[root].child[0], x);
			base[root].child[0] = b, refresh(root);
			return {a, root};
		}
	}
	// Split to [-inf, x), [x, inf)
	// Data must be sorted cmp
	// O(log(n))
	template<class Compare>
	pair<int, int> split_by_key(int root, const T &x, Compare cmp){
		if(!~root) return {-1, -1};
		_push(root);
		if(cmp(base[root].data, x)){
			auto [a, b] = split_by_key(base[root].child[1], x, cmp);
			base[root].child[1] = a, refresh(root);
			return {root, b};
		}
		else{
			auto [a, b] = split_by_key(base[root].child[0], x, cmp);
			base[root].child[0] = b, refresh(root);
			return {a, root};
		}
	}
	// Split into [0, pos), [pos, size(root))
	// O(log(n))
	pair<int, int> split_by_order(int root, int pos){
		if(!~root){
			ASSERT(pos == 0);
			return {-1, -1};
		}
		_push(root);
		if(size(base[root].child[0]) < pos){
			auto [a, b] = split_by_order(base[root].child[1], pos - size(base[root].child[0]) - 1);
			base[root].child[1] = a, refresh(root);
			return {root, b};
		}
		else{
			auto [a, b] = split_by_order(base[root].child[0], pos);
			base[root].child[0] = b, refresh(root);
			return {a, root};
		}
	}
	// Split to [true Segment], [false Segment]
	// Data must be sorted by pred
	// O(log(n))
	pair<int, int> split_by_pred(int root, auto pred){
		if(!~root) return {-1, -1};
		_push(root);
		if(pred(root)){
			auto [a, b] = split_by_pred(base[root].child[1], pred);
			base[root].child[1] = a, refresh(root);
			return {root, b};
		}
		else{
			auto [a, b] = split_by_pred(base[root].child[0], pred);
			base[root].child[0] = b, refresh(root);
			return {a, root};
		}
	}
	// Split into [0, l), [l, r), [r, size(root))
	// O(log(n))
	array<int, 3> split_to_three(int u, int l, int r){
		ASSERT(0 <= l && l <= r && r <= size(u));
		if(!~u) return {-1, -1, -1};
		int a, b, c;
		tie(a, b) = split_by_order(u, l);
		tie(b, c) = split_by_order(b, r - l);
		return {a, b, c};
	}
	// Split into [0, pos[0]), [pos[0], pos[1]), ..., [pos[size(pos) - 1], size(root))
	// O(k * log(n))
	vector<int> split(int root, const vector<int> &pos){
		ASSERT(is_sorted(pos.begin(), pos.end()));
		if(pos.empty()) return {root};
		ASSERT(0 <= pos.front() && pos.back() <= size(root));
		if(!~root) return vector<int>((int)pos.size() + 1, -1);
		vector<int> res((int)pos.size() + 1);
		res[0] = root;
		for(auto i = 0, last = 0; i < (int)pos.size(); ++ i){
			tie(res[i], res[i + 1]) = split_by_order(res[i], pos[i] - last);
			last = pos[i];
		}
		return res;
	}
	// Append u and v
	// O(log(n))
	int append(int u, int v){
		if(!~u || !~v) return ~u ? u : v;
		_push(u);
		_push(v);
		if(base[v].priority < base[u].priority){
			base[u].child[1] = append(base[u].child[1], v), refresh(u);
			return u;
		}
		else{
			base[v].child[0] = append(u, base[v].child[0]), refresh(v);
			return v;
		}
	}
	// Append treaps in order
	// O((list length) * log(n))
	int append(const vector<int> &list){
		return accumulate(list.begin(), list.end(), -1, [&](int u, int v){ return append(u, v); });
	}
	// Data must be sorted by <
	// O(log(n))
	int insert_node_by_key(int root, int u){
		if(!~root) return u;
		_push(root);
		if(base[root].priority > base[u].priority){
			if(base[root].data < base[u].data) base[root].child[1] = insert_node_by_key(base[root].child[1], u);
			else base[root].child[0] = insert_node_by_key(base[root].child[0], u);
			refresh(root);
			return root;
		}
		auto [a, b] = split_by_key(root, base[u].data);
		base[u].child[0] = a, base[u].child[1] = b;
		refresh(u);
		return u;
	}
	// Data must be sorted by <
	// O(log(n))
	int insert_by_key(int root, const T &x){
		return insert_node_by_key(root, new_node(x));
	}
	// Data must be sorted by cmp
	// O(log(n))
	template<class Compare>
	int insert_node_by_key(int root, int u, Compare cmp){
		if(!~root) return u;
		_push(root);
		if(base[root].priority > base[u].priority){
			if(cmp(base[root].data, base[u].data)) base[root].child[1] = insert_node_by_key(base[root].child[1], u, cmp);
			else base[root].child[0] = insert_node_by_key(base[root].child[0], u, cmp);
			refresh(root);
			return root;
		}
		auto [a, b] = split_by_key(root, base[u].data, cmp);
		base[u].child[0] = a, base[u].child[1] = b;
		refresh(u);
		return u;
	}
	// Data must be sorted by cmp
	// O(log(n))
	template<class Compare>
	int insert_by_key(int root, const T &x, Compare cmp){
		return insert_node_by_key(root, new_node(x), cmp);
	}
	// O(log(n))
	int insert_node_by_order(int root, int pos, int u){
		if(!~root){
			ASSERT(pos == 0);
			return u;
		}
		_push(root);
		if(base[root].priority > base[u].priority){
			if(size(base[root].child[0]) < pos) base[root].child[1] = insert_node_by_order(base[root].child[1], pos - size(base[root].child[0]) - 1, u);
			else base[root].child[0] = insert_node_by_order(base[root].child[0], pos, u);
			refresh(root);
			return root;
		}
		auto [a, b] = split_by_order(root, pos);
		base[u].child[0] = a, base[u].child[1] = b;
		refresh(u);
		return u;
	}
	// O(log(n))
	int insert_by_order(int root, int pos, const T &x){
		return insert_node_by_order(root, pos, new_node(x));
	}
	// Data must be sorted by pred
	// O(log(n))
	int insert_node_by_pred(int root, auto pred, int u){
		if(!~root) return u;
		_push(root);
		if(base[root].priority > base[u].priority){
			if(pred(base[root].data)) base[root].child[1] = insert_node_by_pred(base[root].child[1], pred, u);
			else base[root].child[0] = insert_node_by_pred(base[root].child[0], pred, u);
			refresh(root);
			return root;
		}
		auto [a, b] = split_by_pred(root, pred);
		base[u].child[0] = a, base[u].child[1] = b;
		refresh(u);
		return u;
	}
	// O(log(n))
	int insert_by_pred(int root, auto pred, const T &x){
		return insert_node_by_pred(root, pred, new_node(x));
	}
	// Erase the smallest element >= x.
	// Return -2 when no such element exists
	// Data must be sorted by <
	// O(log(n))
	int erase_by_key(int root, const T &x){
		if(!~root) return -2;
		_push(root);
		if(base[root].data < x){
			int u = erase_by_key(base[root].child[1], x);
			if(u == -2) return -2;
			base[root].child[1] = u;
		}
		else{
			int u = erase_by_key(base[root].child[0], x);
			if(u == -2){
				dead_node.push_back(root);
				return append(base[root].child[0], base[root].child[1]);
			}
			base[root].child[0] = u;
		}
		refresh(root);
		return root;
	}
	// Erase the smallest element >= x.
	// Return -2 when no such element exists
	// Data must be sorted by cmp
	// O(log(n))
	template<class Compare>
	int erase_by_key(int root, const T &x, Compare cmp){
		if(!~root) return -2;
		_push(root);
		if(cmp(base[root].data, x)){
			int u = erase_by_key(base[root].child[1], x, cmp);
			if(u == -2) return -2;
			base[root].child[1] = u;
		}
		else{
			int u = erase_by_key(base[root].child[0], x, cmp);
			if(u == -2){
				dead_node.push_back(root);
				return append(base[root].child[0], base[root].child[1]);
			}
			base[root].child[0] = u;
		}
		refresh(root);
		return root;
	}
	// O(log(n))
	int erase_by_order(int root, int pos){
		ASSERT(~root);
		_push(root);
		if(size(base[root].child[0]) == pos){
			dead_node.push_back(root);
			return append(base[root].child[0], base[root].child[1]);
		}
		if(size(base[root].child[0]) < pos) base[root].child[1] = erase_by_order(base[root].child[1], pos - size(base[root].child[0]) - 1);
		else base[root].child[0] = erase_by_order(base[root].child[0], pos);
		refresh(root);
		return root;
	}
	// Erase the smallest element x with !pred(x)
	// Return -2 when no such element exists
	// Data must be sorted by pred
	// O(log(n))
	int erase_by_pred(int root, auto pred){
		if(!~root) return -2;
		_push(root);
		if(pred(base[root].data)){
			int u = erase_by_pred(base[root].child[1], pred);
			if(u == -2) return -2;
			base[root].child[1] = u;
		}
		else{
			int u = erase_by_pred(base[root].child[0], pred);
			if(u == -2){
				dead_node.push_back(root);
				return append(base[root].child[0], base[root].child[1]);
			}
			base[root].child[0] = u;
		}
		refresh(root);
		return root;
	}
	// O(# of elements erased)
	void erase(int root){
		if(!~root) return;
		dead_node.push_back(root);
		for(auto beg = (int)dead_node.size() - 1; beg < (int)dead_node.size(); ++ beg){
			int u = dead_node[beg];
			if(~base[u].child[0]) dead_node.push_back(base[u].child[0]);
			if(~base[u].child[1]) dead_node.push_back(base[u].child[1]);
		}
	}
	// Data must be sorted by <
	// O(min(size(u), size(v)) * log(size ratio))
	int unite_by_key(int u, int v){
		if(!~u || !~v) return ~u ? u : v;
		if(base[u].priority < base[v].priority) swap(u, v);
		auto [a, b] = split_by_key(v, base[u].data);
		_push(u);
		base[u].child[0] = unite_by_key(base[u].child[0], a);
		base[u].child[1] = unite_by_key(base[u].child[1], b);
		refresh(u);
		return u;
	}
	// Data must be sorted by cmp
	// O(min(size(u), size(v)) * log(size ratio))
	template<class Compare>
	int unite_by_key(int u, int v, Compare cmp){
		if(!~u || !~v) return ~u ? u : v;
		if(base[u].priority < base[v].priority) swap(u, v);
		auto [a, b] = split_by_key(v, base[u].data, cmp);
		_push(u);
		base[u].child[0] = unite_by_key(base[u].child[0], a, cmp);
		base[u].child[1] = unite_by_key(base[u].child[1], b, cmp);
		refresh(u);
		return u;
	}
	void traverse(int root, auto f){
		if(~root){
			_push(root);
			traverse(base[root].child[0], f);
			f(root);
			traverse(base[root].child[1], f);
			refresh(root);
		}
	}
	template<class ostream>
	ostream &print(ostream &out, int root){
		#ifdef LOCAL
		vector<T> data;
		traverse(root, [&](int root){ data.push_back(base[root].data); });
		out << "{";
		for(auto i = 0; i < (int)data.size(); ++ i){
			out << data[i];
			if(i + 1 < (int)data.size()) out << ", ";
		}
		out << "}\n";
		#endif
		return out;
	}
	int build(int n){
		return build(vector<T>(n, T_id));
	}
	int build(int n, T init){
		return build(vector<T>(n, init));
	}
	template<class V>
	int build(const vector<V> &a){
		auto recurse = [&](auto self, int l, int r)->int{
			if(l == r) return -1;
			int m = l + (r - l >> 1);
			return new_node(a[m], self(self, l, m), self(self, m + 1, r));
		};
		return recurse(recurse, 0, (int)a.size());
	}
	const T &front(int root){
		ASSERT(~root);
		_push(root);
		while(~base[root].child[0]) root = base[root].child[0], _push(root);
		return base[root].data;
	}
	const T &back(int root){
		ASSERT(~root);
		_push(root);
		while(~base[root].child[1]) root = base[root].child[1], _push(root);
		return base[root].data;
	}
	const T &find_by_order(int root, int p){
		ASSERT(0 <= p && p < size(root));
		while(true){
			_push(root);
			if(p < size(base[root].child[0])){
				root = base[root].child[0];
				continue;
			}
			p -= size(base[root].child[0]);
			if(p == 0) return base[root].data;
			-- p;
			root = base[root].child[1];
		}
	}
	// Data must be sorted by <
	// O(log(n))
	int order_of_key(int root, const T &x){
		int res = 0;
		while(~root){
			_push(root);
			if(base[root].data < x){
				res += size(base[root].child[0]) + 1;
				root = base[root].child[1];
			}
			else root = base[root].child[0];
		}
		return res;
	}
	// Data must be sorted by cmp
	// O(log(n))
	template<class Compare>
	int order_of_key(int root, const T &x, Compare cmp){
		int res = 0;
		while(~root){
			_push(root);
			if(cmp(base[root].data, x)){
				res += size(base[root].child[0]) + 1;
				root = base[root].child[1];
			}
			else root = base[root].child[0];
		}
		return res;
	}
	// O(log(n))
	int node_order(int root, int u){
		ASSERT(~root && ~u);
		int res = 0;
		auto recurse = [&](auto self, int u)->void{
			ASSERT(~u);
			if(root == u) return;
			self(self, base[u].pv);
			_push(base[u].pv);
			if(base[base[u].pv].child[1] == u) res += size(base[base[u].pv].child[0]) + 1;
		};
		recurse(recurse, u);
		_push(u);
		res += size(base[u].child[0]);
		return res;
	}
	// Data must be sorted by pred
	// O(log(n))
	int partition_point(int root, auto pred){
		int res = 0;
		while(~root){
			_push(root);
			if(pred(base[root].data)){
				res += size(base[root].child[0]) + 1;
				root = base[root].child[1];
			}
			else root = base[root].child[0];
		}
		return res;
	}
	// O(log(n))
	void set(int root, int p, const T &x){
		ASSERT(0 <= p && p < size(root));
		int u = root;
		while(true){
			_push(u);
			if(size(base[u].child[0]) == p){
				base[u].data = x;
				refresh<false>(u);
				break;
			}
			if(size(base[u].child[0]) > p) u = base[u].child[0];
			else{
				p -= size(base[u].child[0]) + 1;
				u = base[u].child[1];
			}
		}
		while(u != root){
			u = base[u].pv;
			refresh<false>(u);
		}
	}
	// O(log(n))
	T query(int root, int p){
		ASSERT(0 <= p && p < size(root));
		while(true){
			_push(root);
			if(size(base[root].child[0]) == p) return base[root].data;
			if(size(base[root].child[0]) > p) root = base[root].child[0];
			else{
				p -= size(base[root].child[0]) + 1;
				root = base[root].child[1];
			}
		}
	}
	T _query(int root, int ql, int qr){
		static_assert(HAS_QUERY);
		if(!~root || qr <= 0 || size(root) <= ql) return T_id;
		if(ql <= 0 && size(root) <= qr) return subtr_data[root];
		_push(root);
		T res = T_id;
		if(ql < size(base[root].child[0])) res = _query(base[root].child[0], ql, qr);
		if(ql <= size(base[root].child[0]) && size(base[root].child[0]) + 1 <= qr) res = TT(res, base[root].data);
		if(size(base[root].child[0]) + 1 < qr) res = TT(res, _query(base[root].child[1], ql - size(base[root].child[0]) - 1, qr - size(base[root].child[0]) - 1));
		return res;
	}
	// O(log(n))
	T query(int root, int ql, int qr){
		static_assert(HAS_QUERY);
		ASSERT(0 <= ql && ql <= qr && qr <= size(root));
		return ql == qr ? T_id : _query(root, ql, qr);
	}
	// O(log(n))
	void update(int root, int p, const U &f){
		static_assert(HAS_UPDATE);
		ASSERT(0 <= p && p < size(root));
		int u = root;
		while(true){
			_push(u);
			if(size(base[u].child[0]) == p){
				ifP base[u].data = UT(f, base[u].data, 0);
				else base[u].data = UT(f, base[u].data);
				refresh<false>(u);
				break;
			}
			if(size(base[u].child[0]) > p) u = base[u].child[0];
			else{
				p -= size(base[u].child[0]) + 1;
				u = base[u].child[1];
			}
		}
		while(u != root){
			u = base[u].pv;
			refresh<false>(u);
		}
	}
	// O(log(n))
	void _update(int root, int ql, int qr, const U &f){
		static_assert(HAS_UPDATE);
		if(!~root || qr <= 0 || size(root) <= ql) return;
		if(ql <= 0 && size(root) <= qr){
			ifP{
				base[root].data = UT(f, base[root].data, size(base[root].child[0]) - ql);
				lazy[root] = UU(f, lazy[root], -ql);
			}
			else{
				base[root].data = UT(f, base[root].data);
				lazy[root] = UU(f, lazy[root]);
			}
			refresh<false>(root);
			return;
		}
		_push(root);
		if(ql < size(base[root].child[0])) _update(base[root].child[0], ql, qr, f);
		if(ql <= size(base[root].child[0]) && size(base[root].child[0]) + 1 <= qr){
			ifP base[root].data = UT(f, base[root].data, size(base[root].child[0]) - ql);
			else base[root].data = UT(f, base[root].data);
		}
		if(size(base[root].child[0]) + 1 < qr) _update(base[root].child[1], ql - size(base[root].child[0]) - 1, qr - size(base[root].child[0]) - 1, f);
		refresh<false>(root);
	}
	// O(log(n))
	void update(int root, int ql, int qr, const U &f){
		static_assert(HAS_UPDATE);
		ASSERT(0 <= ql && ql <= qr && qr <= size(root));
		if(ql == qr) return;
		_update(root, ql, qr, f);
	}
	// O(log(n))
	void _flip(int root, int ql, int qr){
		static_assert(HAS_FLIP);
		_push(root);
		if(qr <= size(base[root].child[0])){
			_flip(base[root].child[0], ql, qr);
			refresh<false>(root);
		}
		else if(size(base[root].child[0]) + 1 <= ql){
			_flip(base[root].child[1], ql - size(base[root].child[0]) - 1, qr - size(base[root].child[0]) - 1);
			refresh<false>(root);
		}
		else{
			auto [ar, br] = split_by_order(base[root].child[1], qr - size(base[root].child[0]) - 1);
			auto [al, bl] = split_by_order(base[root].child[0], ql);
			if(~bl){
				_push(bl);
				swap(base[bl].child[0], base[bl].child[1]);
				lazy_flip[bl] ^= 1;
				refresh<false>(bl);
			}
			if(~ar){
				_push(ar);
				swap(base[ar].child[0], base[ar].child[1]);
				lazy_flip[ar] ^= 1;
				refresh<false>(ar);
			}
			base[root].child[0] = append(al, ar);
			base[root].child[1] = append(bl, br);
			refresh(root);
		}
	}
	// O(log(n))
	void flip(int root, int ql, int qr){
		static_assert(HAS_FLIP);
		ASSERT(0 <= ql && ql <= qr && qr <= size(root));
		if(!~root || qr - ql <= 1) return;
		_flip(root, ql, qr);
	}
	// pred(sum[ql, r)) is T, T, ..., T, F, F, ..., F
	// Returns max r with T
	// O(log(n))
	int max_pref(int u, int ql, auto pred){
		static_assert(HAS_QUERY);
		int n = size(u);
		ASSERT(0 <= ql && ql <= n && pred(T_id));
		if(ql == n) return n;
		T sum = T_id;
		auto recurse = [&](auto self, int u, int l)->int{
			int r = l + size(u);
			if(!~u || r <= ql) return n;
			if(ql <= l && pred(TT(sum, subtr_data[u]))){
				sum = TT(sum, subtr_data[u]);
				return n;
			}
			_push(u);
			if(auto p = self(self, base[u].child[0], l); p < n) return p;
			l += size(base[u].child[0]);
			return ql <= l && !pred(sum = TT(sum, base[u].data)) ? l : self(self, base[u].child[1] + 1);
		};
		return recurse(recurse, u, 0);
	}
	// pred(sum[l, qr)) is F, F, ..., F, T, T, ..., T
	// Returns min l with T
	// O(log(n))
	int max_suff(int u, int qr, auto pred){
		static_assert(HAS_QUERY);
		int n = size(u);
		ASSERT(0 <= qr && qr <= n && pred(T_id));
		if(qr == 0) return 0;
		T sum = T_id;
		auto recurse = [&](auto self, int u, int r)->int{
			int l = r - size(u);
			if(!~u || qr <= l) return 0;
			if(r <= qr && pred(TT(subtr_data[u], sum))){
				sum = TT(subtr_data[u], sum);
				return 0;
			}
			_push(u);
			if(auto p = self(self, base[u].child[1], r); p > 0) return p;
			r -= size(base[u].child[1]);
			return r <= qr && !pred(sum = TT(base[u].data, sum)) ? r : self(self, base[u].child[0], r - 1);
		};
		return recurse(recurse, u, n);
	}
	// Assuming each index x stores a non-negative integer indicating how many of x exists,
	// find the k-th smallest element >= ql, or return n if no such element
	// O(log(n))
	int find_by_order(int u, int ql, long long k) const{
		int n = size(u);
		ASSERT(0 <= ql && ql <= n && 0 <= k);
		return max_pref(u, ql, [&](auto sum){ return sum <= k; });
	}
	// Assuming each index x stores a non-negative integer indicating how many of x exists,
	// find the k-th largest element < qr, or return -1 if no such element
	// O(log(n))
	int find_by_reverse_order(int u, int qr, long long k) const{
		int n = size(u);
		ASSERT(0 <= qr && qr <= n && 0 <= k);
		return max_suff(u, qr, [&](auto sum){ return sum <= k; }) - 1;
	}
#undef ASSERT
#undef ifP
#undef ifQ
#undef ifU
#undef ifF
#undef ifNC
};

template<class T>
auto make_treap(){
	using U = int;
	auto _TT = [&](){ assert(false); };
	auto _UU = [&](){ assert(false); };
	auto _UT = [&](){ assert(false); };
	auto _Tflip = [&](){ assert(false); };
	return treap_base<false, false, false, false, false, T, U, decltype(_TT), decltype(_UU), decltype(_UT), decltype(_Tflip)>(_TT, T{}, _UU, U{}, _UT, _Tflip);
}
// Supports flip
template<class T, class F1>
auto make_F_treap(F1 Tflip){
	using U = int;
	auto _TT = [&](){ assert(false); };
	auto _UU = [&](){ assert(false); };
	auto _UT = [&](){ assert(false); };
	return treap_base<false, false, false, true, false, T, U, decltype(_TT), decltype(_UU), decltype(_UT), F1>(_TT, T{}, _UU, U{}, _UT, Tflip);
}
// Supports query
template<class T, class F1>
auto make_Q_treap(F1 TT, T T_id){
	using U = int;
	auto _UU = [&](){ assert(false); };
	auto _UT = [&](){ assert(false); };
	auto _Tflip = [&](){ assert(false); };
	return treap_base<false, true, false, false, false, T, U, F1, decltype(_UU), decltype(_UT), decltype(_Tflip)>(TT, T_id, _UU, U{}, _UT, _Tflip);
}
// Supports query and flip
template<class T, class F1, class F2>
auto make_QF_treap(F1 TT, T T_id, F2 Tflip){
	using U = int;
	auto _UU = [&](){ assert(false); };
	auto _UT = [&](){ assert(false); };
	return treap_base<false, true, false, true, false, T, U, F1, decltype(_UU), decltype(_UT), F2>(TT, T_id, _UU, U{}, _UT, Tflip);
}
// Supports query and update
template<class T, class F1, class F2, class U, class F3>
auto make_QU_treap(F1 TT, T T_id, F2 UU, U U_id, F3 UT){
	auto _Tflip = [&](){ assert(false); };
	return treap_base<false, true, true, false, false, T, U, F1, F2, F3, decltype(_Tflip)>(TT, T_id, UU, U_id, UT, _Tflip);
}
// Supports query and update
template<class T, class F1, class F2, class U, class F3>
auto make_QU_treap_with_offset(F1 TT, T T_id, F2 UU, U U_id, F3 UT){
	auto _Tflip = [&](){ assert(false); };
	return treap_base<true, true, true, false, false, T, U, F1, F2, F3, decltype(_Tflip)>(TT, T_id, UU, U_id, UT, _Tflip);
}
// Supports commutative query, update, and flip
template<class T, class U, class F1, class F2, class F3>
auto make_cQUF_treap(F1 TT, T T_id, F2 UU, U U_id, F3 UT){
	auto _Tflip = [&](){ assert(false); };
	return treap_base<false, true, true, true, true, T, U, F1, F2, F3, decltype(_Tflip)>(TT, T_id, UU, U_id, UT, _Tflip);
}
// Supports commutative query, update, and flip
template<class T, class U, class F1, class F2, class F3>
auto make_cQUF_treap_with_offset(F1 TT, T T_id, F2 UU, U U_id, F3 UT){
	auto _Tflip = [&](){ assert(false); };
	return treap_base<true, true, true, true, true, T, U, F1, F2, F3, decltype(_Tflip)>(TT, T_id, UU, U_id, UT, _Tflip);
}
// Supports query, update, and flip
template<class T, class U, class F1, class F2, class F3, class F4>
auto make_QUF_treap(F1 TT, T T_id, F2 UU, U U_id, F3 UT, F4 Tflip){
	return treap_base<false, true, true, true, false, T, U, F1, F2, F3, F4>(TT, T_id, UU, U_id, UT, Tflip);
}
// Supports query, update, and flip
template<class T, class U, class F1, class F2, class F3, class F4>
auto make_QUF_treap_with_offset(F1 TT, T T_id, F2 UU, U U_id, F3 UT, F4 Tflip){
	return treap_base<true, true, true, true, false, T, U, F1, F2, F3, F4>(TT, T_id, UU, U_id, UT, Tflip);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>treap</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
