<snippet>
	<content><![CDATA[
// Reorder N 2D points with max_x - min_x <= X, max_y - min_y <= Y
// so that sum(abs(xi - x(i+1)) + abs(yi - y(i+1)) is small
// and process queries on the new order.
// X * BX inc_x and dec_x calls, X * Y / BX inc_y and dec_y calls at max
// set BX = sqrt(X Y / N) to achieve sqrt(X Y N) calls at max
struct mo_2d{
	vector<array<int, 2>> points;
	void query(int x, int y){
		points.push_back({x, y});
	}
	static vector<int> get_order(const vector<array<int, 2>> &points){
		if(points.empty()) return {};
		int n = 1;
		for(auto [x, y]: points) n = max({n, x, y});
		int BX = max<int>(1, sqrt(3) * n / sqrt(2 * (int)points.size()));
		vector<int> order((int)points.size());
		iota(order.begin(), order.end(), 0);
		sort(order.begin(), order.end(), [&](int i, int j){ return points[i][0] / BX != points[j][0] / BX ? points[i][0] < points[j][0] : points[i][0] / BX & 1 ? points[i][1] > points[j][1] : points[i][1] < points[j][1]; });
		auto dist = [&](int i, int j){
			return abs(points[order[i]][0] - points[order[j]][0]) + abs(points[order[i]][1] - points[order[j]][1]);
		};
		for(auto i = 0; i < (int)points.size() - 5; ++ i){
			if(dist(i, i + 2) + dist(i + 1, i + 3) < dist(i, i + 1) + dist(i + 2, i + 3)) swap(order[i + 1], order[i + 2]);
			if(dist(i, i + 3) + dist(i + 1, i + 4) < dist(i, i + 1) + dist(i + 3, i + 4)) swap(order[i + 1], order[i + 3]);
		}
		return order;
	}
	// Access each points starting from (0, 0)
	// Each functions acts as if [x, y) is an interval
	void solve(auto dec_x, auto inc_y, auto inc_x, auto dec_y, auto process){
		int x = 0, y = 0;
		for(auto qi: get_order(points)){
			while(points[qi][0] < x) dec_x(-- x); // Insertion
			while(y < points[qi][1]) inc_y(y ++); // Insertion
			while(x < points[qi][0]) inc_x(x ++); // Deletion
			while(points[qi][1] < y) dec_y(-- y); // Deletion
			process(qi);
		}
	}
};
/*
// Insert a[i] from left
	auto dec_x = [&](int i)->void{
		
	};
	// Insert a[i] from right
	auto inc_y = [&](int i)->void{

	};
	// Erase a[i] from left
	auto inc_x = [&](int i)->void{

	};
	// Erase a[i] from right
	auto dec_y = [&](int i)->void{

	};
	auto process = [&](int qi)->void{

	};
	mo.solve(dec_x, inc_y, inc_x, dec_y, process);
*/
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>mo_2d</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
