<snippet>
	<content><![CDATA[
// Source: https://github.com/maspypy/library/blob/main/ds/segtree/segtree_2d.hpp
template<bool COMPRESS, class B, class T, class F>
struct segment_tree_2d_sparse_base{
#ifdef LOCAL
	#define ASSERT(x) assert(x)
#else
	#define ASSERT(x) 42
#endif
	int n;
	// X to idx
	vector<B> keyX;
	int minX;
	// top node の点列
	vector<B> all_Y;
	vector<int> pos;
	// segtree data
	int NX, log, size;
	vector<int> indptr;
	vector<T> data;
	// fractional cascading
	vector<int> to_left;
	F TT;
	T T_id;
	segment_tree_2d_sparse_base(F TT, T T_id): TT(TT), T_id(T_id){ }
	void build(const vector<B> &X, const vector<B> &Y){
		build((int)X.size(), [&](int i){ return tuple{X[i], Y[i], T_id}; });
	}
	void build(const vector<B> &X, const vector<B> &Y, const vector<T> &data){
		build((int)X.size(), [&](int i){ return tuple{X[i], Y[i], data[i]}; });
	}
	// f(i) = (x,y,val)
	void build(int n, auto f){
		this->n = n;
		vector<B> X(n), Y(n);
		vector<T> wt(n);
		for(auto i = 0; i < n; ++ i){
			auto [a, b, c] = f(i);
			X[i] = a, Y[i] = b, wt[i] = c;
		}
		if constexpr(COMPRESS){
			keyX = X;
			sort(keyX.begin(), keyX.end());
			keyX.erase(unique(keyX.begin(), keyX.end()), keyX.end());
			NX = (int)keyX.size();
		}
		else{
			minX = (X.empty() ? 0 : *min_element(X.begin(), X.end()));
			NX = (X.empty() ? 1 : *max_element(X.begin(), X.end()) - minX + 1);
		}
		log = 0;
		while((1 << log) < NX) ++log;
		size = 1 << log;
		vector<int> IX(n);
		for(auto i = 0; i < n; ++ i) IX[i] = xtoi(X[i]);
		indptr.assign(2 * size, 0);
		for(auto i: IX) for(i += size; i; i >>= 1) ++ indptr[i];
		indptr.insert(indptr.begin(), 0);
		for(auto i = 1; i < (int)indptr.size(); ++ i) indptr[i] += indptr[i - 1];
		data.assign(2 * indptr.back(), T_id);
		to_left.assign(indptr[size], 0);
		vector<int> ptr = indptr;
		vector<int> I((int)Y.size());
		iota(I.begin(), I.end(), 0);
		sort(I.begin(), I.end(), [&](int i, int j){ return Y[i] < Y[j]; });
		pos.resize(n);
		for(auto i = 0; i < n; ++ i) pos[I[i]] = i;
		for(auto raw_idx: I){
			int i = IX[raw_idx] + size;
			int j = -1;
			for(; i; i >>= 1) {
				int p = ptr[i];
				ptr[i]++;
				data[indptr[i + 1] + p] = wt[raw_idx];
				if(j != -1){ to_left[p] = (j % 2 == 0); }
				j = i;
			}
		}
		to_left.insert(to_left.begin(), 0);
		for(auto i = 1; i < (int)to_left.size(); ++ i) to_left[i] += to_left[i - 1];
		for(auto i = 0; i < 2 * size; ++ i){
			int off = 2 * indptr[i], n = indptr[i + 1] - indptr[i];
			for(auto j = n - 1; j >= 1; -- j) data[off + j] = TT(data[off + 2 * j + 0], data[off + 2 * j + 1]);
		}
		all_Y = Y;
		sort(all_Y.begin(), all_Y.end());
	}
	// raw_idx: index in the original point cloud
	void multiply(int raw_idx, T val){
		ASSERT(0 <= raw_idx && raw_idx < n);
		int i = 1, p = pos[raw_idx];
		while(true){
			multiply_i(i, p - indptr[i], val);
			if (i >= size) break;
			int lc = to_left[p] - to_left[indptr[i]];
			int rc = (p - indptr[i]) - lc;
			if (to_left[p + 1] - to_left[p]) {
				p = indptr[2 * i + 0] + lc;
				i = 2 * i + 0;
			} else {
				p = indptr[2 * i + 1] + rc;
				i = 2 * i + 1;
			}
		}
	}
	// raw_idx: index in the original point cloud
	void set(int raw_idx, T val){
		int i = 1, p = pos[raw_idx];
		while (1) {
			set_i(i, p - indptr[i], val);
			if (i >= size) break;
			int lc = to_left[p] - to_left[indptr[i]];
			int rc = (p - indptr[i]) - lc;
			if (to_left[p + 1] - to_left[p]) {
				p = indptr[2 * i + 0] + lc;
				i = 2 * i + 0;
			} else {
				p = indptr[2 * i + 1] + rc;
				i = 2 * i + 1;
			}
		}
	}
	T query(B lx, B rx, B ly, B ry){
		ASSERT(lx <= rx && ly <= ry);
		int L = xtoi(lx), R = xtoi(rx);
		T res = T_id;
		auto dfs = [&](auto self, int i, int l, int r, int a, int b)->void{
			if(a == b || R <= l || r <= L) return;
			if(L <= l && r <= R){
				res = TT(res, query_i(i, a, b));
				return;
			}
			int la = to_left[indptr[i] + a] - to_left[indptr[i]];
			int ra = a - la;
			int lb = to_left[indptr[i] + b] - to_left[indptr[i]];
			int rb = b - lb;
			int m = (l + r) / 2;
			self(self, 2 * i + 0, l, m, la, lb);
			self(self, 2 * i + 1, m, r, ra, rb);
		};
		dfs(dfs, 1, 0, size, lower_bound(all_Y.begin(), all_Y.end(), ly) - all_Y.begin(), lower_bound(all_Y.begin(), all_Y.end(), ry) - all_Y.begin());
		return res;
	}
	// Count all points within the rectangle
	// O(n * log(n))
	int count(B lx, B rx, B ly, B ry){
		ASSERT(lx <= rx && ly <= ry);
		int L = xtoi(lx), R = xtoi(rx);
		int res = 0;
		auto dfs = [&](auto self, int i, int l, int r, int a, int b) -> void {
			if(a == b || R <= l || r <= L) return;
			if(L <= l && r <= R){
				res += b - a;
				return;
			}
			int la = to_left[indptr[i] + a] - to_left[indptr[i]];
			int ra = a - la;
			int lb = to_left[indptr[i] + b] - to_left[indptr[i]];
			int rb = b - lb;
			int m = (l + r) / 2;
			self(self, 2 * i + 0, l, m, la, lb);
			self(self, 2 * i + 1, m, r, ra, rb);
		};
		dfs(dfs, 1, 0, size, lower_bound(all_Y.begin(), all_Y.end(), ly) - all_Y.begin(), lower_bound(all_Y.begin(), all_Y.end(), ry) - all_Y.begin());
		return res;
	}
private:
	inline int xtoi(B x){
		if constexpr(COMPRESS) return lower_bound(keyX.begin(), keyX.end(), x) - keyX.begin();
		return clamp<B>(x - minX, 0, NX);
	}
	T query_i(int i, int a, int b){
		int LID = indptr[i], n = indptr[i + 1] - indptr[i];
		int off = 2 * LID;
		T val = T_id;
		for(auto L = n + a, R = n + b; L < R; L >>= 1, R >>= 1){
			if(L & 1) val = TT(val, data[off + L ++]);
			if(R & 1) val = TT(data[off + -- R], val);
		}
		return val;
	}
	void multiply_i(int i, int j, T val){
		int LID = indptr[i], n = indptr[i + 1] - indptr[i];
		int off = 2 * LID;
		for(j += n; j; j >>= 1) data[off + j] = TT(data[off + j], val);
	}
	void set_i(int i, int j, T val){
		int LID = indptr[i], n = indptr[i + 1] - indptr[i];
		int off = 2 * LID;
		j += n;
		data[off + j] = val;
		for(; (j >>= 1) >= 1; ) data[off + j] = TT(data[off + 2 * j + 0], data[off + 2 * j + 1]);
	}
#undef ASSERT
};
template<bool COMPRESS, class B, class T, class F>
auto make_segment_tree_2d_sparse(F TT, T T_id){
	return segment_tree_2d_sparse_base<COMPRESS, B, T, F>(TT, T_id);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segment_tree_2d_sparse</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
